// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	repository "quicktables/internal/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AddDB mocks base method.
func (m *MockIService) AddDB(dbName, strCon, owner, driver, docker string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDB", dbName, strCon, owner, driver, docker)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDB indicates an expected call of AddDB.
func (mr *MockIServiceMockRecorder) AddDB(dbName, strCon, owner, driver, docker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDB", reflect.TypeOf((*MockIService)(nil).AddDB), dbName, strCon, owner, driver, docker)
}

// BindPort mocks base method.
func (m *MockIService) BindPort(port string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindPort", port)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindPort indicates an expected call of BindPort.
func (mr *MockIServiceMockRecorder) BindPort(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindPort", reflect.TypeOf((*MockIService)(nil).BindPort), port)
}

// ChangeNick mocks base method.
func (m *MockIService) ChangeNick(username, nick string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeNick", username, nick)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeNick indicates an expected call of ChangeNick.
func (mr *MockIServiceMockRecorder) ChangeNick(username, nick interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeNick", reflect.TypeOf((*MockIService)(nil).ChangeNick), username, nick)
}

// ChangePassword mocks base method.
func (m *MockIService) ChangePassword(username, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", username, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIServiceMockRecorder) ChangePassword(username, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIService)(nil).ChangePassword), username, oldPassword, newPassword)
}

// CheckDB mocks base method.
func (m *MockIService) CheckDB(owner string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDB", owner)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckDB indicates an expected call of CheckDB.
func (mr *MockIServiceMockRecorder) CheckDB(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDB", reflect.TypeOf((*MockIService)(nil).CheckDB), owner)
}

// CheckPassword mocks base method.
func (m *MockIService) CheckPassword(username, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", username, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockIServiceMockRecorder) CheckPassword(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockIService)(nil).CheckPassword), username, password)
}

// CreateUser mocks base method.
func (m *MockIService) CreateUser(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIServiceMockRecorder) CreateUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIService)(nil).CreateUser), username, password)
}

// DeleteAccount mocks base method.
func (m *MockIService) DeleteAccount() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockIServiceMockRecorder) DeleteAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockIService)(nil).DeleteAccount))
}

// DeleteDB mocks base method.
func (m *MockIService) DeleteDB(username, dbName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDB", username, dbName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockIServiceMockRecorder) DeleteDB(username, dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockIService)(nil).DeleteDB), username, dbName)
}

// Disconnect mocks base method.
func (m *MockIService) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockIServiceMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockIService)(nil).Disconnect))
}

// GetAllDBs mocks base method.
func (m *MockIService) GetAllDBs(owner string) [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDBs", owner)
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetAllDBs indicates an expected call of GetAllDBs.
func (mr *MockIServiceMockRecorder) GetAllDBs(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDBs", reflect.TypeOf((*MockIService)(nil).GetAllDBs), owner)
}

// GetContainerID mocks base method.
func (m *MockIService) GetContainerID(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerID indicates an expected call of GetContainerID.
func (mr *MockIServiceMockRecorder) GetContainerID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerID", reflect.TypeOf((*MockIService)(nil).GetContainerID), arg0, arg1)
}

// GetDB mocks base method.
func (m *MockIService) GetDB(owner string) (string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", owner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// GetDB indicates an expected call of GetDB.
func (mr *MockIServiceMockRecorder) GetDB(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockIService)(nil).GetDB), owner)
}

// GetDBInfobyName mocks base method.
func (m *MockIService) GetDBInfobyName(owner, name string) (string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBInfobyName", owner, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// GetDBInfobyName indicates an expected call of GetDBInfobyName.
func (mr *MockIServiceMockRecorder) GetDBInfobyName(owner, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBInfobyName", reflect.TypeOf((*MockIService)(nil).GetDBInfobyName), owner, name)
}

// GetQueries mocks base method.
func (m *MockIService) GetQueries(username, dbName string) ([]repository.QueryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueries", username, dbName)
	ret0, _ := ret[0].([]repository.QueryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueries indicates an expected call of GetQueries.
func (mr *MockIServiceMockRecorder) GetQueries(username, dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueries", reflect.TypeOf((*MockIService)(nil).GetQueries), username, dbName)
}

// GetUserStats mocks base method.
func (m *MockIService) GetUserStats(username string) (*repository.UserStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStats", username)
	ret0, _ := ret[0].(*repository.UserStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStats indicates an expected call of GetUserStats.
func (mr *MockIServiceMockRecorder) GetUserStats(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStats", reflect.TypeOf((*MockIService)(nil).GetUserStats), username)
}

// SaveQuery mocks base method.
func (m *MockIService) SaveQuery(status int, query, author, dbName, execTime string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveQuery", status, query, author, dbName, execTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveQuery indicates an expected call of SaveQuery.
func (mr *MockIServiceMockRecorder) SaveQuery(status, query, author, dbName, execTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveQuery", reflect.TypeOf((*MockIService)(nil).SaveQuery), status, query, author, dbName, execTime)
}
